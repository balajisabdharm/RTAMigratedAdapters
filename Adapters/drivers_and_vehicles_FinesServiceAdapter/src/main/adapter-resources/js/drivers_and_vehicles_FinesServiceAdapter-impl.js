///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Generated code  																			 //
//																												 //
// This is a SOAP adapter that was auto-generated by Worklight for invocation of specific SOAP-based services.   //
// The adapter may invoke more than one service as long as they are all from the same enpdpoint (server host).   //
// Each adapter procedure matches a single operation for the same endpoint server and accepts:                   //
//   params  - Serialized JSON representation of the XML-based SOAP body to be sent to the service               //
//   headers - Custom HTTP headers to be specified when invoking the remote service. It is a JSON object with    //
//             the headers names and values. E.g. { 'name1' : 'value1', 'name2' : 'value2' }                     //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var soapEnvNS = 'xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" ';
var userName = "%#credentials!#!username#%";
var password = "%#credentials!#!password#%";
var externalUsername = "%#credentials!#!externalUsername#%";
var externalPassword = "%#credentials!#!externalPassword#%";
var IsDebugging;
function Log(text){
	 try {
		 IsDebugging=MFP.Server.getPropertyValue("drivers_and_vehicles_is_debugging");
	 }catch(e){
		 IsDebugging="false";
	 }
	 // MFP.Logger.warn(""+IsDebugging);
	 if(IsDebugging=="true")
		 MFP.Logger.warn(text);
	 else 
		 MFP.Logger.debug(text);
}
function retrieveFinesService(params, isEncryptResponse, encryptionPassword) {
	var envHeader = {
			"urn:username" : userName,
			"urn:password" : password
	};
	var servicePath= '/ws/services/RetrieveFinesService';
	var _soapEnvNS = soapEnvNS + 'xmlns:impl="urn:RetrieveFinesService" xmlns:apachesoap="http://xml.apache.org/xml-soap" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:wsdlsoap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:urn="urn:RetrieveFinesService" ';
	
	var parameters = [JSON.stringify(envHeader), JSON.stringify(params), '', _soapEnvNS.toString()];
    var request = buildBody(parameters, false);
	
	//Log("RetrieveFinesService request >> " + request);
	return invokeWebService(request,servicePath, null, isEncryptResponse, encryptionPassword);
}

function fineManagementService(params, isEncryptResponse, encryptionPassword){
	
	if(!isEncryptResponse){
		isEncryptResponse='false';	
	}
	if(!encryptionPassword){
		encryptionPassword='';	
	}
	
	
		invocationData = {
							adapter : 'drivers_and_vehicles_trafficAdapter_Tibco',
							procedure : 'fineManagementService',
							parameters : [JSON.stringify(params), isEncryptResponse.toString(), encryptionPassword.toString()]
						};
		return MFP.Server.invokeProcedure(invocationData);
}

function invokeWebService(body,servicePath,headers, isEncryptResponse, encryptionPassword) {
	var startTime = new Date().getTime();
	if (!headers)
		headers = {
			"SOAPAction" : ""
	};
	else
		headers["SOAPAction"] = "";
	var input = {
		method : 'post',
		returnedContentType : 'xml',
		path :servicePath,
		headers : {
			"SOAPAction" : 'impl'
		},
		body : {
			content : body.toString(),
			contentType : 'text/xml; charset=utf-8'
		}
	};

	// Adding custom HTTP headers if they were provided as parameter to the
	// procedure call
	headers && (input['headers'] = headers);

	var webServiceResult = MFP.Server.invokeHttp(input);

	if(isEncryptResponse != undefined && isEncryptResponse == true)
	{
		var responseString = JSON.stringify(webServiceResult);
		var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'encryptData',
			parameters : [responseString,encryptionPassword]
		};
		webServiceResult = MFP.Server.invokeProcedure(invocationData);
	}	

	var endTime = new Date().getTime();
	//Log("time for "+ servicePath + " is " + (endTime - startTime) + " ms");
	var invocationData = {
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'deleteCredientails',
			parameters : [webServiceResult]
	};
	return MFP.Server.invokeProcedure(invocationData); 
}

function buildBody(parameters, isStatic) {
	var request = "";
	
	if (isStatic == true) {
			request = MFP.Server.invokeProcedure({
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'buildBodyFromStaticRequest',
			parameters : parameters,
			
		});
	} else {
			request = MFP.Server.invokeProcedure({
			adapter : 'drivers_and_vehciles_utilitiesAdapter',
			procedure : 'buildBody',
			parameters : parameters
		});
	}
	
	return request.body;
}
